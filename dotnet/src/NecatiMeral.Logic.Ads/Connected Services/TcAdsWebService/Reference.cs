//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//
//     Änderungen an dieser Datei können fehlerhaftes Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TcAdsWebService
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://beckhoff.org/wsdl/", ConfigurationName="TcAdsWebService.TcAdsSyncSoapPort")]
    internal interface TcAdsSyncSoapPort
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://beckhoff.org/action/TcAdsSync.Write", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        System.Threading.Tasks.Task<TcAdsWebService.WriteResponse> WriteAsync(TcAdsWebService.WriteRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://beckhoff.org/action/TcAdsSync.Read", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        System.Threading.Tasks.Task<TcAdsWebService.ReadResponse> ReadAsync(TcAdsWebService.ReadRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://beckhoff.org/action/TcAdsSync.ReadWrite", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        System.Threading.Tasks.Task<TcAdsWebService.ReadWriteResponse> ReadWriteAsync(TcAdsWebService.ReadWriteRequest request);
        
        // CODEGEN: Ein Nachrichtenvertrag wird generiert, da der Vorgang mehrere Rückgabewerte aufweist.
        [System.ServiceModel.OperationContractAttribute(Action="http://beckhoff.org/action/TcAdsSync.ReadState", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        System.Threading.Tasks.Task<TcAdsWebService.ReadStateResponse> ReadStateAsync(TcAdsWebService.ReadStateRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://beckhoff.org/action/TcAdsSync.WriteControl", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        System.Threading.Tasks.Task<TcAdsWebService.WriteControlResponse> WriteControlAsync(TcAdsWebService.WriteControlRequest request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="Write", WrapperNamespace="http://beckhoff.org/message/", IsWrapped=true)]
    internal partial class WriteRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=0)]
        public string netId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=1)]
        public int nPort;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=2)]
        public uint indexGroup;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=3)]
        public uint indexOffset;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=4)]
        [System.Xml.Serialization.SoapElementAttribute(DataType="base64Binary")]
        public byte[] pData;
        
        public WriteRequest()
        {
        }
        
        public WriteRequest(string netId, int nPort, uint indexGroup, uint indexOffset, byte[] pData)
        {
            this.netId = netId;
            this.nPort = nPort;
            this.indexGroup = indexGroup;
            this.indexOffset = indexOffset;
            this.pData = pData;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="WriteResponse", WrapperNamespace="http://beckhoff.org/message/", IsWrapped=true)]
    internal partial class WriteResponse
    {
        
        public WriteResponse()
        {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="Read", WrapperNamespace="http://beckhoff.org/message/", IsWrapped=true)]
    internal partial class ReadRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=0)]
        public string netId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=1)]
        public int nPort;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=2)]
        public uint indexGroup;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=3)]
        public uint indexOffset;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=4)]
        public int cbLen;
        
        public ReadRequest()
        {
        }
        
        public ReadRequest(string netId, int nPort, uint indexGroup, uint indexOffset, int cbLen)
        {
            this.netId = netId;
            this.nPort = nPort;
            this.indexGroup = indexGroup;
            this.indexOffset = indexOffset;
            this.cbLen = cbLen;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ReadResponse", WrapperNamespace="http://beckhoff.org/message/", IsWrapped=true)]
    internal partial class ReadResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=0)]
        [System.Xml.Serialization.SoapElementAttribute(DataType="base64Binary")]
        public byte[] ppData;
        
        public ReadResponse()
        {
        }
        
        public ReadResponse(byte[] ppData)
        {
            this.ppData = ppData;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ReadWrite", WrapperNamespace="http://beckhoff.org/message/", IsWrapped=true)]
    internal partial class ReadWriteRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=0)]
        public string netId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=1)]
        public int nPort;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=2)]
        public uint indexGroup;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=3)]
        public uint indexOffset;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=4)]
        public int cbRdLen;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=5)]
        [System.Xml.Serialization.SoapElementAttribute(DataType="base64Binary")]
        public byte[] pwrData;
        
        public ReadWriteRequest()
        {
        }
        
        public ReadWriteRequest(string netId, int nPort, uint indexGroup, uint indexOffset, int cbRdLen, byte[] pwrData)
        {
            this.netId = netId;
            this.nPort = nPort;
            this.indexGroup = indexGroup;
            this.indexOffset = indexOffset;
            this.cbRdLen = cbRdLen;
            this.pwrData = pwrData;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ReadWriteResponse", WrapperNamespace="http://beckhoff.org/message/", IsWrapped=true)]
    internal partial class ReadWriteResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=0)]
        [System.Xml.Serialization.SoapElementAttribute(DataType="base64Binary")]
        public byte[] ppRdData;
        
        public ReadWriteResponse()
        {
        }
        
        public ReadWriteResponse(byte[] ppRdData)
        {
            this.ppRdData = ppRdData;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ReadState", WrapperNamespace="http://beckhoff.org/message/", IsWrapped=true)]
    internal partial class ReadStateRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=0)]
        public string netId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=1)]
        public int nPort;
        
        public ReadStateRequest()
        {
        }
        
        public ReadStateRequest(string netId, int nPort)
        {
            this.netId = netId;
            this.nPort = nPort;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ReadStateResponse", WrapperNamespace="http://beckhoff.org/message/", IsWrapped=true)]
    internal partial class ReadStateResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=0)]
        public int pAdsState;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=1)]
        public int pDeviceState;
        
        public ReadStateResponse()
        {
        }
        
        public ReadStateResponse(int pAdsState, int pDeviceState)
        {
            this.pAdsState = pAdsState;
            this.pDeviceState = pDeviceState;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="WriteControl", WrapperNamespace="http://beckhoff.org/message/", IsWrapped=true)]
    internal partial class WriteControlRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=0)]
        public string netId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=1)]
        public int nPort;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=2)]
        public int adsState;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=3)]
        public int deviceState;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=4)]
        [System.Xml.Serialization.SoapElementAttribute(DataType="base64Binary")]
        public byte[] pData;
        
        public WriteControlRequest()
        {
        }
        
        public WriteControlRequest(string netId, int nPort, int adsState, int deviceState, byte[] pData)
        {
            this.netId = netId;
            this.nPort = nPort;
            this.adsState = adsState;
            this.deviceState = deviceState;
            this.pData = pData;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="WriteControlResponse", WrapperNamespace="http://beckhoff.org/message/", IsWrapped=true)]
    internal partial class WriteControlResponse
    {
        
        public WriteControlResponse()
        {
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    internal interface TcAdsSyncSoapPortChannel : TcAdsWebService.TcAdsSyncSoapPort, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    internal partial class TcAdsSyncSoapPortClient : System.ServiceModel.ClientBase<TcAdsWebService.TcAdsSyncSoapPort>, TcAdsWebService.TcAdsSyncSoapPort
    {
        
        /// <summary>
        /// Implementieren Sie diese partielle Methode, um den Dienstendpunkt zu konfigurieren.
        /// </summary>
        /// <param name="serviceEndpoint">Der zu konfigurierende Endpunkt</param>
        /// <param name="clientCredentials">Die Clientanmeldeinformationen</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public TcAdsSyncSoapPortClient() : 
                base(TcAdsSyncSoapPortClient.GetDefaultBinding(), TcAdsSyncSoapPortClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.TcAdsSyncSoapPort.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public TcAdsSyncSoapPortClient(EndpointConfiguration endpointConfiguration) : 
                base(TcAdsSyncSoapPortClient.GetBindingForEndpoint(endpointConfiguration), TcAdsSyncSoapPortClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public TcAdsSyncSoapPortClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(TcAdsSyncSoapPortClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public TcAdsSyncSoapPortClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(TcAdsSyncSoapPortClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public TcAdsSyncSoapPortClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<TcAdsWebService.WriteResponse> TcAdsWebService.TcAdsSyncSoapPort.WriteAsync(TcAdsWebService.WriteRequest request)
        {
            return base.Channel.WriteAsync(request);
        }
        
        public System.Threading.Tasks.Task<TcAdsWebService.WriteResponse> WriteAsync(string netId, int nPort, uint indexGroup, uint indexOffset, byte[] pData)
        {
            TcAdsWebService.WriteRequest inValue = new TcAdsWebService.WriteRequest();
            inValue.netId = netId;
            inValue.nPort = nPort;
            inValue.indexGroup = indexGroup;
            inValue.indexOffset = indexOffset;
            inValue.pData = pData;
            return ((TcAdsWebService.TcAdsSyncSoapPort)(this)).WriteAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<TcAdsWebService.ReadResponse> TcAdsWebService.TcAdsSyncSoapPort.ReadAsync(TcAdsWebService.ReadRequest request)
        {
            return base.Channel.ReadAsync(request);
        }
        
        public System.Threading.Tasks.Task<TcAdsWebService.ReadResponse> ReadAsync(string netId, int nPort, uint indexGroup, uint indexOffset, int cbLen)
        {
            TcAdsWebService.ReadRequest inValue = new TcAdsWebService.ReadRequest();
            inValue.netId = netId;
            inValue.nPort = nPort;
            inValue.indexGroup = indexGroup;
            inValue.indexOffset = indexOffset;
            inValue.cbLen = cbLen;
            return ((TcAdsWebService.TcAdsSyncSoapPort)(this)).ReadAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<TcAdsWebService.ReadWriteResponse> TcAdsWebService.TcAdsSyncSoapPort.ReadWriteAsync(TcAdsWebService.ReadWriteRequest request)
        {
            return base.Channel.ReadWriteAsync(request);
        }
        
        public System.Threading.Tasks.Task<TcAdsWebService.ReadWriteResponse> ReadWriteAsync(string netId, int nPort, uint indexGroup, uint indexOffset, int cbRdLen, byte[] pwrData)
        {
            TcAdsWebService.ReadWriteRequest inValue = new TcAdsWebService.ReadWriteRequest();
            inValue.netId = netId;
            inValue.nPort = nPort;
            inValue.indexGroup = indexGroup;
            inValue.indexOffset = indexOffset;
            inValue.cbRdLen = cbRdLen;
            inValue.pwrData = pwrData;
            return ((TcAdsWebService.TcAdsSyncSoapPort)(this)).ReadWriteAsync(inValue);
        }
        
        public System.Threading.Tasks.Task<TcAdsWebService.ReadStateResponse> ReadStateAsync(TcAdsWebService.ReadStateRequest request)
        {
            return base.Channel.ReadStateAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<TcAdsWebService.WriteControlResponse> TcAdsWebService.TcAdsSyncSoapPort.WriteControlAsync(TcAdsWebService.WriteControlRequest request)
        {
            return base.Channel.WriteControlAsync(request);
        }
        
        public System.Threading.Tasks.Task<TcAdsWebService.WriteControlResponse> WriteControlAsync(string netId, int nPort, int adsState, int deviceState, byte[] pData)
        {
            TcAdsWebService.WriteControlRequest inValue = new TcAdsWebService.WriteControlRequest();
            inValue.netId = netId;
            inValue.nPort = nPort;
            inValue.adsState = adsState;
            inValue.deviceState = deviceState;
            inValue.pData = pData;
            return ((TcAdsWebService.TcAdsSyncSoapPort)(this)).WriteControlAsync(inValue);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.TcAdsSyncSoapPort))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Es wurde kein Endpunkt mit dem Namen \"{0}\" gefunden.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.TcAdsSyncSoapPort))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost/TcAdsWebService/TcAdsWebService.dll");
            }
            throw new System.InvalidOperationException(string.Format("Es wurde kein Endpunkt mit dem Namen \"{0}\" gefunden.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return TcAdsSyncSoapPortClient.GetBindingForEndpoint(EndpointConfiguration.TcAdsSyncSoapPort);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return TcAdsSyncSoapPortClient.GetEndpointAddress(EndpointConfiguration.TcAdsSyncSoapPort);
        }
        
        public enum EndpointConfiguration
        {
            
            TcAdsSyncSoapPort,
        }
    }
}
