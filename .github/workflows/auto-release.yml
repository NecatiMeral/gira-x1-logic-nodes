# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: Create Release

on:
  push:
    branches:
    - "main"
    tags:
    - "v*.*.*"

permissions:
  contents: write

jobs:
  deployment:
    environment: production

    runs-on: windows-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.9.15
      with:
        versionSpec: '5.x'

    - name: Determine Version
      id: gitversion
      uses: gittools/actions/gitversion/execute@v0.9.15
      with:
        useConfigFile: true

    # Set version
    - name: Set Version
      run: |
        .\build\set-version.ps1 -Version ${{ steps.gitversion.outputs.majorMinorPatch }}

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x

    # Restore
    - name: Restore
      run: dotnet restore "dotnet"

    # Build the solution
    - name: Build
      run: dotnet build "dotnet" --no-restore -c Release

    # Execute all unit tests in the solution
    - name: Test
      run: dotnet test "dotnet" --no-build -c Release

    # Decode the base 64 encoded pfx and save the Signing_Certificate
    - name: Decode the pfx
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String($Env:GIRA_CERT_CONTENT)
        $certificatePath = Join-Path -Path "build" -ChildPath GitHubActionsWorkflow.pfx
        [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)
      env:
        GIRA_CERT_CONTENT: ${{ secrets.GIRA_CERT_CONTENT }}

    # Set version
    - name: Sign packages
      run: |
        .\build\create-packages.ps1 -SigniningCertFile .\build\GitHubActionsWorkflow.pfx -SigniningCertPass $Env:GIRA_CERT_PASS
      env:
        GIRA_CERT_PASS: ${{ secrets.GIRA_CERT_PASS }}

    # Remove the pfx
    - name: Remove the pfx
      run: Remove-Item -path .\build\GitHubActionsWorkflow.pfx

    - name: Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: dist/*.zip
        generate_release_notes: true

    # Upload the packages: https://github.com/marketplace/actions/upload-a-build-artifact
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: Logic nodes
        path: dist/*.zip
